package decoder

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

var hepPacket = []byte{0x48, 0x45, 0x50, 0x33, 0x3, 0x28, 0x0, 0x0, 0x0, 0x1, 0x0, 0x7, 0x2, 0x0, 0x0, 0x0, 0x2, 0x0, 0x7, 0x11, 0x0, 0x0, 0x0, 0x3, 0x0, 0xa, 0xc8, 0x39, 0x7, 0xc3, 0x0, 0x0, 0x0, 0x4, 0x0, 0xa, 0xc8, 0x39, 0x7, 0xcc, 0x0, 0x0, 0x0, 0x7, 0x0, 0x8, 0x13, 0xc4, 0x0, 0x0, 0x0, 0x8, 0x0, 0x8, 0x13, 0xc5, 0x0, 0x0, 0x0, 0x9, 0x0, 0xa, 0x5a, 0x9b, 0xc2, 0x72, 0x0, 0x0, 0x0, 0xa, 0x0, 0xa, 0x0, 0xd, 0x79, 0x82, 0x0, 0x0, 0x0, 0xb, 0x0, 0x7, 0x1, 0x0, 0x0, 0x0, 0xc, 0x0, 0xa, 0x0, 0x0, 0x7, 0xd2, 0x0, 0x0, 0x0, 0xe, 0x0, 0xb, 0x6d, 0x79, 0x68, 0x65, 0x70, 0x0, 0x0, 0x0, 0xf, 0x2, 0xc0, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x20, 0x73, 0x69, 0x70, 0x3a, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x40, 0x62, 0x65, 0x73, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x3a, 0x35, 0x35, 0x30, 0x36, 0x30, 0x20, 0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e, 0x30, 0xd, 0xa, 0x56, 0x69, 0x61, 0x3a, 0x20, 0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e, 0x30, 0x2f, 0x55, 0x44, 0x50, 0x20, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x35, 0x3b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x3d, 0x7a, 0x39, 0x68, 0x47, 0x34, 0x62, 0x4b, 0x66, 0x66, 0x39, 0x62, 0x34, 0x36, 0x66, 0x62, 0x30, 0x35, 0x35, 0x63, 0x30, 0x35, 0x32, 0x31, 0x63, 0x63, 0x32, 0x34, 0x30, 0x32, 0x34, 0x64, 0x61, 0x39, 0x36, 0x63, 0x64, 0x32, 0x39, 0x30, 0xd, 0xa, 0x56, 0x69, 0x61, 0x3a, 0x20, 0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e, 0x30, 0x2f, 0x55, 0x44, 0x50, 0x20, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x35, 0x3a, 0x35, 0x35, 0x30, 0x36, 0x31, 0x3b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x3d, 0x7a, 0x39, 0x68, 0x47, 0x34, 0x62, 0x4b, 0x32, 0x39, 0x31, 0x64, 0x39, 0x30, 0x65, 0x33, 0x31, 0x61, 0x34, 0x37, 0x62, 0x32, 0x32, 0x35, 0x62, 0x64, 0x30, 0x64, 0x64, 0x66, 0x66, 0x34, 0x33, 0x35, 0x33, 0x65, 0x39, 0x63, 0x63, 0x30, 0xd, 0xa, 0x46, 0x72, 0x6f, 0x6d, 0x3a, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x35, 0x3a, 0x35, 0x35, 0x30, 0x36, 0x31, 0x3b, 0x75, 0x73, 0x65, 0x72, 0x3d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x3e, 0x3b, 0x74, 0x61, 0x67, 0x3d, 0x47, 0x52, 0x35, 0x32, 0x52, 0x57, 0x47, 0x33, 0x34, 0x36, 0x2d, 0x33, 0x34, 0xd, 0xa, 0x54, 0x6f, 0x3a, 0x20, 0x22, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x40, 0x62, 0x65, 0x73, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x40, 0x62, 0x65, 0x73, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x3a, 0x35, 0x35, 0x30, 0x36, 0x30, 0x3e, 0xd, 0xa, 0x43, 0x61, 0x6c, 0x6c, 0x2d, 0x49, 0x44, 0x3a, 0x20, 0x31, 0x32, 0x30, 0x31, 0x33, 0x32, 0x32, 0x33, 0x40, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x35, 0xd, 0xa, 0x43, 0x53, 0x65, 0x71, 0x3a, 0x20, 0x31, 0x20, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0xd, 0xa, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x3a, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x35, 0x3a, 0x35, 0x30, 0x36, 0x30, 0x3e, 0xd, 0xa, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x64, 0x70, 0xd, 0xa, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20, 0x20, 0x20, 0x32, 0x32, 0x39, 0xd, 0xa, 0xd, 0xa, 0x76, 0x3d, 0x30, 0xd, 0xa, 0x6f, 0x3d, 0x43, 0x6c, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x31, 0x32, 0x30, 0x33, 0x38, 0x36, 0x20, 0x31, 0x32, 0x30, 0x33, 0x38, 0x37, 0x20, 0x49, 0x4e, 0x20, 0x49, 0x50, 0x34, 0x20, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x36, 0xd, 0xa, 0x73, 0x3d, 0x43, 0x6c, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x43, 0x35, 0x43, 0x4d, 0xd, 0xa, 0x63, 0x3d, 0x49, 0x4e, 0x20, 0x49, 0x50, 0x34, 0x20, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x36, 0xd, 0xa, 0x74, 0x3d, 0x30, 0x20, 0x30, 0xd, 0xa, 0x6d, 0x3d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x20, 0x34, 0x30, 0x33, 0x37, 0x36, 0x20, 0x52, 0x54, 0x50, 0x2f, 0x41, 0x56, 0x50, 0x20, 0x38, 0x20, 0x31, 0x38, 0x20, 0x34, 0x20, 0x30, 0xd, 0xa, 0x61, 0x3d, 0x72, 0x74, 0x70, 0x6d, 0x61, 0x70, 0x3a, 0x38, 0x20, 0x50, 0x43, 0x4d, 0x41, 0x2f, 0x38, 0x30, 0x30, 0x30, 0xd, 0xa, 0x61, 0x3d, 0x72, 0x74, 0x70, 0x6d, 0x61, 0x70, 0x3a, 0x31, 0x38, 0x20, 0x47, 0x37, 0x32, 0x39, 0x2f, 0x38, 0x30, 0x30, 0x30, 0xd, 0xa, 0x61, 0x3d, 0x72, 0x74, 0x70, 0x6d, 0x61, 0x70, 0x3a, 0x34, 0x20, 0x47, 0x37, 0x32, 0x33, 0x2f, 0x38, 0x30, 0x30, 0x30, 0xd, 0xa, 0x61, 0x3d, 0x72, 0x74, 0x70, 0x6d, 0x61, 0x70, 0x3a, 0x30, 0x20, 0x50, 0x43, 0x4d, 0x55, 0x2f, 0x38, 0x30, 0x30, 0x30, 0xd, 0xa, 0x61, 0x3d, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x76, 0xd, 0xa}

func TestDecodeEncodeHEP(t *testing.T) {
	hep, err := DecodeHEP(hepPacket)
	if err != nil {
		t.Error(err)
	}

	rawPacket := EncodeHEP(hep)
	assert.Equal(t, hepPacket, rawPacket)
}

func BenchmarkDecodeEncodeHEP(b *testing.B) {
	for i := 0; i < b.N; i++ {
		val, _ := DecodeHEP(hepPacket)
		_ = EncodeHEP(val)
		_ = val
	}
}
