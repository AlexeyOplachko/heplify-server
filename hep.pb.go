// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hep.proto

/*
	Package decoder is a generated protocol buffer package.

	It is generated from these files:
		hep.proto

	It has these top-level messages:
		HEP
*/
package decoder

import (
	fmt "fmt"
	"net"
	"time"

	proto "github.com/gogo/protobuf/proto"
	"github.com/negbie/sipparser"

	math "math"

	_ "github.com/gogo/protobuf/gogoproto"

	strings "strings"

	reflect "reflect"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// HEP represents HEP packet
type HEP struct {
	Version   uint32 `protobuf:"varint,1,req,name=Version" json:"Version"`
	Protocol  uint32 `protobuf:"varint,2,req,name=Protocol" json:"Protocol"`
	SrcIP     string `protobuf:"bytes,3,req,name=SrcIP" json:"SrcIP"`
	DstIP     string `protobuf:"bytes,4,req,name=DstIP" json:"DstIP"`
	SrcPort   uint32 `protobuf:"varint,5,req,name=SrcPort" json:"SrcPort"`
	DstPort   uint32 `protobuf:"varint,6,req,name=DstPort" json:"DstPort"`
	Tsec      uint32 `protobuf:"varint,7,req,name=Tsec" json:"Tsec"`
	Tmsec     uint32 `protobuf:"varint,8,req,name=Tmsec" json:"Tmsec"`
	ProtoType uint32 `protobuf:"varint,9,req,name=ProtoType" json:"ProtoType"`
	NodeID    uint32 `protobuf:"varint,10,req,name=NodeID" json:"NodeID"`
	NodePW    string `protobuf:"bytes,11,req,name=NodePW" json:"NodePW"`
	Payload   string `protobuf:"bytes,12,req,name=Payload" json:"Payload"`
	CID       string `protobuf:"bytes,13,req,name=CID" json:"CID"`
	Vlan      uint32 `protobuf:"varint,14,req,name=Vlan" json:"Vlan"`
	NetSrcIP  net.IP
	NetDstIP  net.IP
	Timestamp time.Time
	SIP       *sipparser.SipMsg
}

func (m *HEP) Reset()                    { *m = HEP{} }
func (*HEP) ProtoMessage()               {}
func (*HEP) Descriptor() ([]byte, []int) { return fileDescriptorHep, []int{0} }

func (m *HEP) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *HEP) GetProtocol() uint32 {
	if m != nil {
		return m.Protocol
	}
	return 0
}

func (m *HEP) GetSrcIP() string {
	if m != nil {
		return m.SrcIP
	}
	return ""
}

func (m *HEP) GetDstIP() string {
	if m != nil {
		return m.DstIP
	}
	return ""
}

func (m *HEP) GetSrcPort() uint32 {
	if m != nil {
		return m.SrcPort
	}
	return 0
}

func (m *HEP) GetDstPort() uint32 {
	if m != nil {
		return m.DstPort
	}
	return 0
}

func (m *HEP) GetTsec() uint32 {
	if m != nil {
		return m.Tsec
	}
	return 0
}

func (m *HEP) GetTmsec() uint32 {
	if m != nil {
		return m.Tmsec
	}
	return 0
}

func (m *HEP) GetProtoType() uint32 {
	if m != nil {
		return m.ProtoType
	}
	return 0
}

func (m *HEP) GetNodeID() uint32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *HEP) GetNodePW() string {
	if m != nil {
		return m.NodePW
	}
	return ""
}

func (m *HEP) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *HEP) GetCID() string {
	if m != nil {
		return m.CID
	}
	return ""
}

func (m *HEP) GetVlan() uint32 {
	if m != nil {
		return m.Vlan
	}
	return 0
}

func init() {
	proto.RegisterType((*HEP)(nil), "decoder.HEP")
}
func (this *HEP) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&decoder.HEP{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	s = append(s, "SrcIP: "+fmt.Sprintf("%#v", this.SrcIP)+",\n")
	s = append(s, "DstIP: "+fmt.Sprintf("%#v", this.DstIP)+",\n")
	s = append(s, "SrcPort: "+fmt.Sprintf("%#v", this.SrcPort)+",\n")
	s = append(s, "DstPort: "+fmt.Sprintf("%#v", this.DstPort)+",\n")
	s = append(s, "Tsec: "+fmt.Sprintf("%#v", this.Tsec)+",\n")
	s = append(s, "Tmsec: "+fmt.Sprintf("%#v", this.Tmsec)+",\n")
	s = append(s, "ProtoType: "+fmt.Sprintf("%#v", this.ProtoType)+",\n")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "NodePW: "+fmt.Sprintf("%#v", this.NodePW)+",\n")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "CID: "+fmt.Sprintf("%#v", this.CID)+",\n")
	s = append(s, "Vlan: "+fmt.Sprintf("%#v", this.Vlan)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringHep(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *HEP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HEP) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintHep(dAtA, i, uint64(m.Version))
	dAtA[i] = 0x10
	i++
	i = encodeVarintHep(dAtA, i, uint64(m.Protocol))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintHep(dAtA, i, uint64(len(m.SrcIP)))
	i += copy(dAtA[i:], m.SrcIP)
	dAtA[i] = 0x22
	i++
	i = encodeVarintHep(dAtA, i, uint64(len(m.DstIP)))
	i += copy(dAtA[i:], m.DstIP)
	dAtA[i] = 0x28
	i++
	i = encodeVarintHep(dAtA, i, uint64(m.SrcPort))
	dAtA[i] = 0x30
	i++
	i = encodeVarintHep(dAtA, i, uint64(m.DstPort))
	dAtA[i] = 0x38
	i++
	i = encodeVarintHep(dAtA, i, uint64(m.Tsec))
	dAtA[i] = 0x40
	i++
	i = encodeVarintHep(dAtA, i, uint64(m.Tmsec))
	dAtA[i] = 0x48
	i++
	i = encodeVarintHep(dAtA, i, uint64(m.ProtoType))
	dAtA[i] = 0x50
	i++
	i = encodeVarintHep(dAtA, i, uint64(m.NodeID))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintHep(dAtA, i, uint64(len(m.NodePW)))
	i += copy(dAtA[i:], m.NodePW)
	dAtA[i] = 0x62
	i++
	i = encodeVarintHep(dAtA, i, uint64(len(m.Payload)))
	i += copy(dAtA[i:], m.Payload)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintHep(dAtA, i, uint64(len(m.CID)))
	i += copy(dAtA[i:], m.CID)
	dAtA[i] = 0x70
	i++
	i = encodeVarintHep(dAtA, i, uint64(m.Vlan))
	return i, nil
}

func encodeVarintHep(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HEP) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovHep(uint64(m.Version))
	n += 1 + sovHep(uint64(m.Protocol))
	l = len(m.SrcIP)
	n += 1 + l + sovHep(uint64(l))
	l = len(m.DstIP)
	n += 1 + l + sovHep(uint64(l))
	n += 1 + sovHep(uint64(m.SrcPort))
	n += 1 + sovHep(uint64(m.DstPort))
	n += 1 + sovHep(uint64(m.Tsec))
	n += 1 + sovHep(uint64(m.Tmsec))
	n += 1 + sovHep(uint64(m.ProtoType))
	n += 1 + sovHep(uint64(m.NodeID))
	l = len(m.NodePW)
	n += 1 + l + sovHep(uint64(l))
	l = len(m.Payload)
	n += 1 + l + sovHep(uint64(l))
	l = len(m.CID)
	n += 1 + l + sovHep(uint64(l))
	n += 1 + sovHep(uint64(m.Vlan))
	return n
}

func sovHep(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHep(x uint64) (n int) {
	return sovHep(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *HEP) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HEP{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`SrcIP:` + fmt.Sprintf("%v", this.SrcIP) + `,`,
		`DstIP:` + fmt.Sprintf("%v", this.DstIP) + `,`,
		`SrcPort:` + fmt.Sprintf("%v", this.SrcPort) + `,`,
		`DstPort:` + fmt.Sprintf("%v", this.DstPort) + `,`,
		`Tsec:` + fmt.Sprintf("%v", this.Tsec) + `,`,
		`Tmsec:` + fmt.Sprintf("%v", this.Tmsec) + `,`,
		`ProtoType:` + fmt.Sprintf("%v", this.ProtoType) + `,`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`NodePW:` + fmt.Sprintf("%v", this.NodePW) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`CID:` + fmt.Sprintf("%v", this.CID) + `,`,
		`Vlan:` + fmt.Sprintf("%v", this.Vlan) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringHep(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *HEP) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHep
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HEP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HEP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHep
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHep
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHep
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHep
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHep
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHep
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcPort", wireType)
			}
			m.SrcPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHep
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPort", wireType)
			}
			m.DstPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHep
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tsec", wireType)
			}
			m.Tsec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHep
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tsec |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tmsec", wireType)
			}
			m.Tmsec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHep
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tmsec |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtoType", wireType)
			}
			m.ProtoType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHep
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtoType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000100)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHep
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000200)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodePW", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHep
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHep
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodePW = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000400)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHep
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHep
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000800)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHep
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHep
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00001000)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vlan", wireType)
			}
			m.Vlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHep
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vlan |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00002000)
		default:
			iNdEx = preIndex
			skippy, err := skipHep(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHep
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("Version")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("Protocol")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("SrcIP")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return proto.NewRequiredNotSetError("DstIP")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return proto.NewRequiredNotSetError("SrcPort")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return proto.NewRequiredNotSetError("DstPort")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return proto.NewRequiredNotSetError("Tsec")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return proto.NewRequiredNotSetError("Tmsec")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return proto.NewRequiredNotSetError("ProtoType")
	}
	if hasFields[0]&uint64(0x00000200) == 0 {
		return proto.NewRequiredNotSetError("NodeID")
	}
	if hasFields[0]&uint64(0x00000400) == 0 {
		return proto.NewRequiredNotSetError("NodePW")
	}
	if hasFields[0]&uint64(0x00000800) == 0 {
		return proto.NewRequiredNotSetError("Payload")
	}
	if hasFields[0]&uint64(0x00001000) == 0 {
		return proto.NewRequiredNotSetError("CID")
	}
	if hasFields[0]&uint64(0x00002000) == 0 {
		return proto.NewRequiredNotSetError("Vlan")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHep(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHep
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHep
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHep
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthHep
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHep
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHep(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHep = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHep   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("hep.proto", fileDescriptorHep) }

var fileDescriptorHep = []byte{
	// 312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8f, 0xbd, 0x6e, 0xf2, 0x30,
	0x14, 0x86, 0x31, 0xe1, 0x2f, 0xfe, 0x3e, 0x3a, 0x78, 0xa8, 0x8e, 0x10, 0x72, 0x11, 0x13, 0x4b,
	0xe1, 0x1e, 0x68, 0x2a, 0x35, 0x4b, 0x65, 0x15, 0x44, 0x67, 0x70, 0x5c, 0x40, 0x0a, 0x38, 0x72,
	0xc2, 0xc0, 0xd6, 0x4b, 0xe8, 0x5d, 0xf4, 0x56, 0x18, 0x3b, 0x76, 0xaa, 0x4a, 0x7a, 0x03, 0xbd,
	0x84, 0xca, 0x4e, 0xd2, 0x9e, 0xcd, 0x7e, 0x9e, 0x73, 0xf4, 0x9e, 0x97, 0xfa, 0x1b, 0x95, 0x8c,
	0x13, 0xa3, 0x33, 0xcd, 0xda, 0x91, 0x92, 0x3a, 0x52, 0xa6, 0x77, 0xbd, 0xde, 0x66, 0x9b, 0xc3,
	0x6a, 0x2c, 0xf5, 0x6e, 0xb2, 0xd6, 0x6b, 0x3d, 0x71, 0x7e, 0x75, 0x78, 0x72, 0x3f, 0xf7, 0x71,
	0xaf, 0x62, 0x6f, 0xf8, 0xea, 0x51, 0xef, 0xee, 0x56, 0x30, 0x4e, 0xdb, 0x0b, 0x65, 0xd2, 0xad,
	0xde, 0x03, 0x19, 0xd4, 0x47, 0xdd, 0x69, 0xe3, 0xf4, 0x71, 0x55, 0x7b, 0xa8, 0x20, 0x1b, 0xd0,
	0x8e, 0xb0, 0x0b, 0x52, 0xc7, 0x50, 0x47, 0x03, 0xbf, 0x94, 0xf5, 0x68, 0x73, 0x66, 0x64, 0x28,
	0xc0, 0x1b, 0xd4, 0x47, 0x7e, 0xa9, 0x0b, 0x64, 0x5d, 0x90, 0x66, 0xa1, 0x80, 0x06, 0x76, 0x0e,
	0xd9, 0xe4, 0x99, 0x91, 0x42, 0x9b, 0x0c, 0x9a, 0x38, 0xb9, 0x84, 0xd6, 0x07, 0x69, 0xe6, 0x7c,
	0x0b, 0xfb, 0x12, 0x32, 0xa0, 0x8d, 0x79, 0xaa, 0x24, 0xb4, 0x91, 0x74, 0xc4, 0xa6, 0xce, 0x77,
	0x56, 0x75, 0x90, 0x2a, 0x10, 0x1b, 0x52, 0xdf, 0x5d, 0x3e, 0x3f, 0x26, 0x0a, 0x7c, 0xe4, 0xff,
	0x30, 0xeb, 0xd3, 0xd6, 0xbd, 0x8e, 0x54, 0x18, 0x00, 0x45, 0x03, 0x25, 0xab, 0xac, 0x78, 0x84,
	0x7f, 0xa8, 0x54, 0xc9, 0xec, 0xd5, 0x62, 0x79, 0x8c, 0xf5, 0x32, 0x82, 0xff, 0x48, 0x57, 0x90,
	0x5d, 0x52, 0xef, 0x26, 0x0c, 0xa0, 0x8b, 0x9c, 0x05, 0xb6, 0xcd, 0x22, 0x5e, 0xee, 0xe1, 0x02,
	0xb7, 0xb1, 0x64, 0xda, 0x7f, 0x3f, 0xf3, 0xda, 0xf7, 0x99, 0x93, 0xe7, 0x9c, 0x93, 0x53, 0xce,
	0xc9, 0x5b, 0xce, 0xc9, 0x67, 0xce, 0xc9, 0xcb, 0x17, 0xaf, 0xfd, 0x04, 0x00, 0x00, 0xff, 0xff,
	0xc3, 0xea, 0x6f, 0xba, 0x0b, 0x02, 0x00, 0x00,
}
